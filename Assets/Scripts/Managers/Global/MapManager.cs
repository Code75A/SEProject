
using UnityEngine;
using UnityEngine.Tilemaps;
using UnityEngine.EventSystems;
using System.Collections.Generic;
using System;
using System.Data;
using System.Threading.Tasks;


public class MapManager : MonoBehaviour
{
    public static MapManager Instance { get; private set; }
    public const int MAP_SIZE = 64;

    public class MapData{
        public Vector3Int position;
        public TileBase texture;
        public tileTypes type;

        //has_print：是否显示蓝图
        public bool has_print = false;
        //has_building：如果采用实例化building为item子类，则has_building = true必然说明has_item = true
        public bool has_building = false;
        //has_item：has_item = true 后通过item的类型判断

        public bool has_item = false; public ItemInstanceManager.ItemInstance item = null;

        //用于维护寻路点阵图
        public bool can_walk = true;
        public bool can_build = true;
        public bool can_plant = true;
        //TODO: 拓展为List<bool> cans + enum canTypes{walk,build,plant}

        public float fertility = 1.0f;
        public float humidity = 0.0f;
        public float light = 1.0f;

        public float walk_speed = 1.0f;
    }
    
    public Tilemap landTilemap;
    public enum tileTypes{
        grass,path,water,tree,farm,total
    }
    
    public TileBase[] tiles = new TileBase[(int)tileTypes.total];

    public MapData[,] mapDatas = new MapData[MAP_SIZE, MAP_SIZE];

    Dictionary<BuildManager.BuildingType, Action<MapData, BuildManager.Building>> buildActions =new Dictionary<BuildManager.BuildingType, Action<MapData, BuildManager.Building>>{
        {BuildManager.BuildingType.Dev, (data, building) => Instance.SetTileDev(data, building)},
        {BuildManager.BuildingType.Wall, (data, building) => Instance.SetTilePrint(data, building)},
        {BuildManager.BuildingType.Farm, (data, building) => Instance.SetTileFarm(data, building)}
    };
    //-------------generated by Copilot-----------------
    public void GenerateMapData(){
        for (int x = 0; x < MAP_SIZE; x++){
            for (int y = 0; y < MAP_SIZE; y++){
                mapDatas[x, y] = new MapData();
                mapDatas[x, y].type = tileTypes.grass;
                mapDatas[x, y].texture = tiles[(int)tileTypes.grass];
                mapDatas[x, y].position = new Vector3Int(x, y, 0);
            }
        }
    }
    //-------------generated by Copilot----------------- 
    public void GenerateMapTiles(){
        for (int x = 0; x < MAP_SIZE; x++){
            for (int y = 0; y < MAP_SIZE; y++){
                landTilemap.SetTile(new Vector3Int(x, y, 0), mapDatas[x, y].texture);
            }
        }
    }

    //单例模式
    void Awake(){
        if(Instance == null)
        {
            Instance = this;
            DontDestroyOnLoad(gameObject);
        }
        else
        {
            Destroy(gameObject);
        }
    }

    public void Start(){
        GenerateMapData();
        GenerateMapTiles();
    }

    void Update()
    {
        if(Input.GetMouseButtonDown(0)){
            // 排除点击 UI 的情况？
            // TODO: 需要更妥善地处理UI
            //if (EventSystem.current.IsPointerOverGameObject()) return;

            Vector3 mouseWorldPos = Camera.main.ScreenToWorldPoint(Input.mousePosition); 
            Vector2 mousePos2D = new Vector2(mouseWorldPos.x, mouseWorldPos.y);

            // 排除带有 Collider2D 的 Sprite 的情况
            RaycastHit2D hitSprite = Physics2D.Raycast(mousePos2D, Vector2.zero, 0f);
            if (hitSprite.collider != null){
            //TODO： 加入更多Tag区分交互对象
            //&& hitSprite.collider.gameObject.CompareTag("Interactable"))
                
                //Debug.Log("点击到了 Sprite: " + hitSprite.collider.gameObject.name);
                return; 
            }
            
            Vector3Int cellPos = landTilemap.WorldToCell(mouseWorldPos);
            if(IsInBoard(cellPos)){

                TileBase clickedTile = landTilemap.GetTile(cellPos);
                MapData clickedData = mapDatas[cellPos.x, cellPos.y];

                if (clickedTile != null){

                    UIManager.Instance.DebugTextAdd("点击到了 Tile: " + cellPos);
                    
                    BuildManager.Building building = BuildManager.Instance.currentBuilding;
                    if(building != null){

                        UIManager.Instance.DebugTextAdd("放置建筑: " + building.name);

                        //非Dev建筑占地特判
                        if(building.type != BuildManager.BuildingType.Dev && (clickedData.has_building || clickedData.has_print)){
                            Debug.Log("此处已有建筑/蓝图，无法放置");
                            return;
                        }

                        //根据buildingType更新数据
                        if(buildActions.TryGetValue(building.type, out Action<MapData, BuildManager.Building> action))
                            action(clickedData, building);
                        else
                            Debug.Log("未定义的建筑类型: " + building.type);

                        //Dev：landtilemap更新贴图
                        if(building.type == BuildManager.BuildingType.Dev || building.type == BuildManager.BuildingType.Farm){
                            landTilemap.SetTile(cellPos, clickedData.texture);
                        }

                    }
                }
            }
            else{
                BuildManager.Instance.CancelCurrentBuilding();
            }
        }
    }

    void SetTileDev(MapData data,BuildManager.Building building){
        int id=building.id;

        data.type = (tileTypes)id;
        data.texture = tiles[id];

        data.can_build=building.can_build;
        data.can_walk=building.can_walk;
        data.can_plant=building.can_plant;

        data.has_print = false;
        data.has_building = false;
        data.has_item = false;data.item = null;
    }
    void SetTilePrint(MapData data, BuildManager.Building building){

        TaskManager.Instance.AddTask(data.position, TaskManager.TaskTypes.Build);

        data.has_print = true;
        data.has_item = true;
        data.can_build = false;
        data.can_plant = false;

        data.item = ItemInstanceManager.Instance.SpawnItem(data.position, building.id, ItemInstanceManager.ItemInstanceType.PrintItemInstance);
    }
    void SetTileFarm(MapData data, BuildManager.Building building){
    
        if(!data.can_plant){
            Debug.Log("此处无法种植");
            return;
        }

        data.type = tileTypes.farm;
        data.texture = tiles[(int)tileTypes.farm];

        data.has_print = false;
        data.has_building = true;
        data.has_item = true;
        data.can_build = false;
        data.can_plant = true;

        data.item = ItemInstanceManager.Instance.SpawnItem(data.position, building.id, ItemInstanceManager.ItemInstanceType.BuildingInstance);
    }

    bool IsInBoard(Vector3Int pos){
        return pos.x >= 0 && pos.x < MAP_SIZE && pos.y >= 0 && pos.y < MAP_SIZE;
    }
}
